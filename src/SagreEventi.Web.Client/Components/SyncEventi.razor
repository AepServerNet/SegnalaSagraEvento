@inject IJSRuntime JsRuntime
@inject EventiLocalStorage eventiLocalStorage
@implements IDisposable

@if (onLine)
{
    <div class="row">
        <div class="col-12" style="text-align: right;">
            <button class="btn btn-primary" @onclick="Synchronize" disabled="@IsBusy">
                @if (IsBusy)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> <span>Aggiornamento in corso, attendere prego...</span>
                }
                else
                {
                    <span><i class="fas fa-sync"></i> Aggiorna eventi</span>
                }
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-12"><div class="alert alert-success" role="alert">Stato applicazione: <b>Online</b></div></div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger" role="alert">Stato applicazione: <b>Offline - Connessione assente</b></div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback ForceRefreshEventCallback { get; set; }

    public bool onLine { get; set; }
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    [JSInvokable("Connection.StatusChanged")]
    public void OnConnectionStatusChanged(bool isOnline)
    {
        if (onLine != isOnline)
        {
            onLine = isOnline;
            IsBusy = !isOnline;
        }

        StateHasChanged();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("Connection.Initialize", DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("Connection.Dispose");
    }

    public async Task Synchronize()
    {
        IsBusy = true;

        await eventiLocalStorage.EseguiSyncWithDatabase();
        await ForceRefreshEventCallback.InvokeAsync();

        IsBusy = false;
    }
}